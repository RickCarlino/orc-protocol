openapi: 3.1.0
info:
  title: Open Rooms Chat API
  version: "2025-09-09"
  description: >
    Open Rooms Chat is a strict JSON-over-HTTP+WebSocket protocol for small,
    non-federated communities. This OpenAPI describes the HTTP portion. Real-time
    WebSocket frames and event schemas are described under components/schemas.
servers:
  - url: https://api.example.com
    description: Default server
tags:
  - name: Meta
  - name: Auth
  - name: Users
  - name: Rooms
  - name: DMs
  - name: Messages
  - name: Search
  - name: Uploads
  - name: Notifications
  - name: Moderation
  - name: Preferences
  - name: Directory
  - name: Emoji
  - name: Export
  - name: Realtime

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: bearer
    TicketQuery:
      type: apiKey
      in: query
      name: ticket
  parameters:
    Limit:
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema: { type: integer, minimum: 1, maximum: 200 }
    Cursor:
      name: cursor
      in: query
      description: Opaque pagination cursor returned by a previous call.
      required: false
      schema: { type: string }
    FromSeq:
      name: from_seq
      in: query
      description: Inclusive starting sequence number for forward pagination.
      required: false
      schema: { type: integer, minimum: 0 }
    BeforeSeq:
      name: before_seq
      in: query
      description: Exclusive sequence number to backfill before, descending.
      required: false
      schema: { type: integer, minimum: 0 }
    RoomName:
      name: room_name
      in: path
      required: true
      description: Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize.
      schema: { type: string, minLength: 1, maxLength: 80 }
    Username:
      name: username
      in: path
      required: true
      description: Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -)
      schema:
        $ref: '#/components/schemas/Username'
    MessageId:
      name: message_id
      in: path
      required: true
      schema: { $ref: '#/components/schemas/Id' }
    SessionId:
      name: session_id
      in: path
      required: true
      schema: { $ref: '#/components/schemas/Id' }
    Cid:
      name: cid
      in: path
      required: true
      schema: { $ref: '#/components/schemas/Id' }
    DeviceId:
      name: device_id
      in: path
      required: true
      schema: { $ref: '#/components/schemas/Id' }
  responses:
    ErrorResponse:
      description: Error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NoContent:
      description: No Content
  schemas:
    Username:
      type: string
      description: Globally-unique public username.
      minLength: 2
      maxLength: 32
      pattern: '^[a-z0-9](?:[a-z0-9._-]{0,30}[a-z0-9])?$'
    Id:
      type: string
      description: rfc4648 Base32 (no padding), server-scoped.
      pattern: '^[a-z2-7]+$'
    Timestamp:
      type: string
      format: date-time
      description: RFC 3339 UTC with Z
    User:
      type: object
      required: [username, display_name]
      properties:
        username: { $ref: '#/components/schemas/Username' }
        display_name: { type: string, minLength: 1, maxLength: 128 }
        photo_cid: { $ref: '#/components/schemas/Id' }
        bio: { type: string, maxLength: 1024 }
        status_text: { type: string, maxLength: 80 }
        status_emoji: { type: string }
      additionalProperties: true
    PresenceState:
      type: string
      enum: [online, away, dnd]
    PresenceUpdate:
      type: object
      required: [state]
      properties:
        state: { $ref: '#/components/schemas/PresenceState' }
    Room:
      type: object
      required: [room_id, name, visibility, owner, created_at]
      properties:
        room_id: { $ref: '#/components/schemas/Id' }
        name: { type: string, minLength: 1, maxLength: 80 }
        topic: { type: string, maxLength: 512 }
        visibility: { type: string, enum: [public, private] }
        owner: { $ref: '#/components/schemas/Username' }
        created_at: { $ref: '#/components/schemas/Timestamp' }
        counts:
          type: object
          properties:
            members: { type: integer, minimum: 0 }
          additionalProperties: true
        pinned_message_ids:
          type: array
          items: { $ref: '#/components/schemas/Id' }
      additionalProperties: true
    RoomMember:
      type: object
      required: [username, role]
      properties:
        username: { $ref: '#/components/schemas/Username' }
        role:
          type: string
          enum: [owner, admin, moderator, member, guest]
    Permission:
      type: string
      enum:
        - manage_room
        - manage_pins
        - manage_roles
        - kick
        - ban
        - mute
        - purge_message
        - post
        - react
        - edit_own_message
        - delete_own_message
        - read
    Role:
      type: object
      required: [name, permissions]
      properties:
        name:
          type: string
          enum: [owner, admin, moderator, member, guest]
        permissions:
          type: array
          items: { $ref: '#/components/schemas/Permission' }
    Attachment:
      type: object
      required: [cid, mime, name, bytes]
      properties:
        cid: { $ref: '#/components/schemas/Id' }
        mime: { type: string }
        name: { type: string }
        bytes: { type: integer, minimum: 0 }
      additionalProperties: true
    Reaction:
      type: object
      required: [emoji, count]
      properties:
        emoji: { type: string }
        count: { type: integer, minimum: 0 }
        me: { type: boolean }
    Message:
      type: object
      required: [message_id, author, seq, ts]
      properties:
        message_id: { $ref: '#/components/schemas/Id' }
        room_id: { anyOf: [ { $ref: '#/components/schemas/Id' }, { type: 'null' } ] }
        dm_peer: { anyOf: [ { type: 'string' }, { type: 'null' } ] }
        author: { $ref: '#/components/schemas/Username' }
        seq: { type: integer, minimum: 0 }
        ts: { $ref: '#/components/schemas/Timestamp' }
        parent_id: { anyOf: [ { $ref: '#/components/schemas/Id' }, { type: 'null' } ] }
        content_type: { type: string, const: text/markdown }
        text: { type: string, description: "Markdown subset", maxLength: 4000 }
        entities:
          type: object
          properties:
            mentions:
              type: array
              items:
                type: object
                required: [username, range]
                properties:
                  username: { $ref: '#/components/schemas/Username' }
                  range:
                    type: array
                    items: { type: integer, minimum: 0 }
                    minItems: 2
                    maxItems: 2
            links:
              type: array
              items:
                type: object
                required: [url, range]
                properties:
                  url: { type: string, format: uri }
                  range:
                    type: array
                    items: { type: integer, minimum: 0 }
                    minItems: 2
                    maxItems: 2
          additionalProperties: true
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Attachment' }
        reactions:
          type: array
          items: { $ref: '#/components/schemas/Reaction' }
        tombstone: { type: boolean }
        edited_at: { anyOf: [ { $ref: '#/components/schemas/Timestamp' }, { type: 'null' } ] }
        moderation_reason: { anyOf: [ { type: string }, { type: 'null' } ] }
      additionalProperties: true
    MessageCreate:
      type: object
      properties:
        text: { type: string, maxLength: 4000 }
        content_type: { type: string, default: text/markdown, enum: [text/markdown] }
        parent_id: { $ref: '#/components/schemas/Id' }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Attachment' }
      required: [text]
    MessageEdit:
      type: object
      properties:
        text: { type: string, maxLength: 4000 }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/Attachment' }
      minProperties: 1
    ReactionRequest:
      type: object
      required: [emoji]
      properties:
        emoji: { type: string }
    AckRequest:
      type: object
      required: [seq]
      properties:
        seq: { type: integer, minimum: 0 }
    CreateRoomRequest:
      type: object
      required: [name, visibility]
      properties:
        name: { type: string, minLength: 1, maxLength: 80 }
        visibility: { type: string, enum: [public, private] }
        topic: { type: string, maxLength: 512 }
    PatchRoomRequest:
      type: object
      properties:
        name: { type: string, minLength: 1, maxLength: 80 }
        visibility: { type: string, enum: [public, private] }
        topic: { type: string, maxLength: 512 }
      minProperties: 1
    InviteRequest:
      type: object
      required: [username]
      properties:
        username: { $ref: '#/components/schemas/Username' }
    RoleAssignRequest:
      type: object
      required: [username, role]
      properties:
        username: { $ref: '#/components/schemas/Username' }
        role: { type: string, enum: [owner, admin, moderator, member, guest] }
    BanRequest:
      type: object
      required: [username]
      properties:
        username: { $ref: '#/components/schemas/Username' }
        reason: { type: string }
        duration_sec: { type: integer, minimum: 1 }
    MuteRequest:
      type: object
      required: [username]
      properties:
        username: { $ref: '#/components/schemas/Username' }
        duration_sec: { type: integer, minimum: 1 }
    ReportRequest:
      type: object
      properties:
        message_id: { $ref: '#/components/schemas/Id' }
        username: { $ref: '#/components/schemas/Username' }
        reason: { type: string }
        notes: { type: string }
      minProperties: 1
      required: [reason]
    UploadResponse:
      type: object
      required: [cid, bytes, mime, sha256]
      properties:
        cid: { $ref: '#/components/schemas/Id' }
        bytes: { type: integer, minimum: 0 }
        mime: { type: string }
        sha256: { type: string }
    TicketResponse:
      type: object
      required: [ticket, expires_in_ms]
      properties:
        ticket: { type: string }
        expires_in_ms: { type: integer, minimum: 1 }
    Preview:
      type: object
      required: [url]
      properties:
        url: { type: string, format: uri }
        title: { type: string }
        description: { type: string }
        image_cid: { $ref: '#/components/schemas/Id' }
    NotificationPrefsPatch:
      type: object
      properties:
        room_overrides:
          type: object
          additionalProperties:
            type: object
            properties:
              mute: { type: boolean }
        thread_mutes:
          type: array
          items: { $ref: '#/components/schemas/Id' }
        user_mutes:
          type: array
          items: { $ref: '#/components/schemas/Username' }
    PrefsPatch:
      type: object
      properties:
        link_previews: { type: boolean }
    CapabilityResponse:
      type: object
      required: [capabilities, limits, server]
      properties:
        capabilities:
          type: array
          items: { type: string }
        limits:
          type: object
          required: [max_message_bytes, max_upload_bytes, max_reactions_per_message, cursor_idle_timeout_ms, rate_limits]
          properties:
            max_message_bytes: { type: integer, minimum: 1 }
            max_upload_bytes: { type: integer, minimum: 0 }
            max_reactions_per_message: { type: integer, minimum: 0 }
            cursor_idle_timeout_ms: { type: integer, minimum: 0 }
            rate_limits:
              type: object
              required: [burst, per_minute]
              properties:
                burst: { type: integer, minimum: 0 }
                per_minute: { type: integer, minimum: 0 }
        server:
          type: object
          required: [name]
          properties:
            name: { type: string }
            description: { type: string }
            contact: { type: string }
    Session:
      type: object
      required: [session_id, created_at]
      properties:
        session_id: { $ref: '#/components/schemas/Id' }
        device: { type: string }
        created_at: { $ref: '#/components/schemas/Timestamp' }
        last_seen_at: { $ref: '#/components/schemas/Timestamp' }
    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code:
              type: string
              enum:
                - bad_request
                - unauthorized
                - forbidden
                - not_found
                - unsupported_capability
                - rate_limited
                - conflict
                - history_pruned
                - internal
            message: { type: string }
            details: { type: object }
    LoginRequest:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }
    GuestRequest:
      type: object
      required: [username]
      properties:
        username: { type: string }
    LoginResponse:
      type: object
      required: [access_token, user]
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
        user: { $ref: '#/components/schemas/User' }
    RefreshRequest:
      type: object
      required: [refresh_token]
      properties:
        refresh_token: { type: string }
    RefreshResponse:
      type: object
      required: [access_token]
      properties:
        access_token: { type: string }
        refresh_token: { type: string }
    RegisterPushRequest:
      type: object
      required: [platform, token, device_id]
      properties:
        platform:
          type: string
          enum: [webpush, apns, fcm]
        token: { type: string }
        device_id: { $ref: '#/components/schemas/Id' }
    ExportResponse:
      type: object
      required: [export_id, status]
      properties:
        export_id: { $ref: '#/components/schemas/Id' }
        status: { type: string, enum: [queued, running, complete, failed] }
        url: { type: string, format: uri }

    # --- WebSocket message schemas (for documentation) ---
    WSHello:
      type: object
      required: [type, client]
      properties:
        type: { type: string, const: hello }
        client:
          type: object
          required: [name, version]
          properties:
            name: { type: string }
            version: { type: string }
        cursors:
          type: object
          description: Map of stream keys to last processed seq (e.g., "room:<name>", "dm:<username>").
          additionalProperties: { type: integer, minimum: 0 }
        want:
          type: array
          description: Optional feature hints (e.g., presence, typing, reactions).
          items: { type: string }
    WSReady:
      type: object
      required: [type, heartbeat_ms, server_time]
      properties:
        type: { type: string, const: ready }
        heartbeat_ms: { type: integer, minimum: 1000 }
        server_time: { $ref: '#/components/schemas/Timestamp' }
        capabilities:
          type: array
          items: { type: string }
    WSEventMessageCreate:
      type: object
      required: [type, message]
      properties:
        type: { type: string, const: event.message.create }
        message: { $ref: '#/components/schemas/Message' }
    WSEventMessageEdit:
      type: object
      required: [type, message]
      properties:
        type: { type: string, const: event.message.edit }
        message: { $ref: '#/components/schemas/Message' }
    WSEventMessageDelete:
      type: object
      required: [type, message_id]
      properties:
        type: { type: string, const: event.message.delete }
        message_id: { $ref: '#/components/schemas/Id' }
        room_id: { $ref: '#/components/schemas/Id' }
        dm_peer: { type: string }
        ts: { $ref: '#/components/schemas/Timestamp' }
    WSEventReactionAdd:
      type: object
      required: [type, message_id, emoji]
      properties:
        type: { type: string, const: event.reaction.add }
        message_id: { $ref: '#/components/schemas/Id' }
        emoji: { type: string }
        counts:
          type: array
          items:
            type: object
            required: [emoji, count]
            properties:
              emoji: { type: string }
              count: { type: integer, minimum: 0 }
    WSEventTyping:
      type: object
      required: [type, username, state]
      properties:
        type: { type: string, const: event.typing }
        room_id: { $ref: '#/components/schemas/Id' }
        dm_peer: { type: string }
        username: { $ref: '#/components/schemas/Username' }
        state: { type: string, enum: [start, stop] }
    WSAck:
      type: object
      description: WebSocket cursor acknowledgement frame.
      required: [type, cursors]
      properties:
        type: { type: string, const: ack }
        cursors:
          type: object
          additionalProperties: { type: integer, minimum: 0 }
    WSError:
      type: object
      required: [type, error]
      properties:
        type: { type: string, const: error }
        error: { $ref: '#/components/schemas/ErrorResponse' }

paths:
  /meta/capabilities:
    get:
      tags: [Meta]
      summary: Discover server capabilities and limits
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CapabilityResponse' }

  /auth/guest:
    post:
      tags: [Auth]
      summary: Obtain a guest session (username required)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GuestRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '400': { $ref: '#/components/responses/ErrorResponse' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login with username/password (and optional OTP)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResponse' }
        '401':
          description: Unauthorized (invalid credentials or OTP required)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh an access token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshRequest' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RefreshResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Revoke the current device session
      security: [{ BearerAuth: [] }]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /auth/sessions:
    get:
      tags: [Auth]
      summary: List active device sessions
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items: { $ref: '#/components/schemas/Session' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /auth/sessions/{session_id}:
    delete:
      tags: [Auth]
      summary: Revoke another device session
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/SessionId' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
        '404': { $ref: '#/components/responses/ErrorResponse' }

  

  /users/me:
    get:
      tags: [Users]
      summary: Get current user
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
    patch:
      tags: [Users]
      summary: Update current user profile
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                display_name: { type: string, minLength: 1, maxLength: 128 }
                bio: { type: string, maxLength: 1024 }
                status_text: { type: string, maxLength: 80 }
                status_emoji: { type: string }
                photo_cid: { $ref: '#/components/schemas/Id' }
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /users/me/presence:
    patch:
      tags: [Users]
      summary: Set presence state
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PresenceUpdate' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /users/{username}:
    get:
      tags: [Users]
      summary: Get a user's public profile
      security: [{ BearerAuth: [] }, {}]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      responses:
        '200':
          description: User
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404': { $ref: '#/components/responses/ErrorResponse' }

  /blocks/{username}:
    post:
      tags: [Users]
      summary: Server-assisted block (optional)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
    delete:
      tags: [Users]
      summary: Remove server-assisted block (optional)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /directory/users:
    get:
      tags: [Directory]
      summary: Searchable user directory
      security: [{ BearerAuth: [] }, {}]
      parameters:
        - name: q
          in: query
          required: false
          schema: { type: string }
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items: { $ref: '#/components/schemas/User' }
                  next_cursor: { type: string }

  /directory/rooms:
    get:
      tags: [Directory]
      summary: Discover public rooms
      security: [{ BearerAuth: [] }, {}]
      parameters:
        - name: q
          in: query
          required: false
          schema: { type: string }
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items: { $ref: '#/components/schemas/Room' }
                  next_cursor: { type: string }

  /rooms:
    get:
      tags: [Rooms]
      summary: List rooms for the current user
      security: [{ BearerAuth: [] }]
      parameters:
        - name: mine
          in: query
          required: false
          schema: { type: boolean, default: true }
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  rooms:
                    type: array
                    items: { $ref: '#/components/schemas/Room' }
                  next_cursor: { type: string }
        '401': { $ref: '#/components/responses/ErrorResponse' }
    post:
      tags: [Rooms]
      summary: Create a room
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateRoomRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}:
    get:
      tags: [Rooms]
      summary: Get a room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      responses:
        '200':
          description: Room
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
        '404': { $ref: '#/components/responses/ErrorResponse' }
    patch:
      tags: [Rooms]
      summary: Update a room (owner/admin)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PatchRoomRequest' }
      responses:
        '200':
          description: Room
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}/members:
    get:
      tags: [Rooms]
      summary: List room members
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/RoomName'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Members
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items: { $ref: '#/components/schemas/RoomMember' }
                  next_cursor: { type: string }

  /rooms/{room_name}/invite:
    post:
      tags: [Rooms]
      summary: Invite a user to a private room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/InviteRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
        '403': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}/join:
    post:
      tags: [Rooms]
      summary: Join a room
      security: [{ BearerAuth: [] }, {}]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
        '403': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}/leave:
    post:
      tags: [Rooms]
      summary: Leave a room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}/pins:
    post:
      tags: [Rooms]
      summary: Pin a message
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message_id]
              properties:
                message_id: { $ref: '#/components/schemas/Id' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
    delete:
      tags: [Rooms]
      summary: Unpin a message
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/RoomName'
        - name: message_id
          in: query
          required: true
          schema: { $ref: '#/components/schemas/Id' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/roles:
    get:
      tags: [Rooms]
      summary: Get role definitions for the room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      responses:
        '200':
          description: Roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items: { $ref: '#/components/schemas/Role' }

  /rooms/{room_name}/roles/assign:
    post:
      tags: [Rooms]
      summary: Assign a role to a user
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleAssignRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
        '403': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}/messages:
    get:
      tags: [Messages]
      summary: Read forward room history
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/RoomName'
        - $ref: '#/components/parameters/FromSeq'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
                  next_seq: { type: integer, minimum: 0 }
    post:
      tags: [Messages]
      summary: Send a message to a room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MessageCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '400': { $ref: '#/components/responses/ErrorResponse' }

  /rooms/{room_name}/messages/backfill:
    get:
      tags: [Messages]
      summary: Backfill room history (reverse)
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/RoomName'
        - $ref: '#/components/parameters/BeforeSeq'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
                  prev_seq: { type: integer, minimum: 0 }

  /rooms/{room_name}/ack:
    post:
      tags: [Messages]
      summary: Advance the room cursor
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AckRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/cursor:
    get:
      tags: [Messages]
      summary: Read the room cursor
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      responses:
        '200':
          description: Cursor
          content:
            application/json:
              schema:
                type: object
                properties:
                  seq: { type: integer, minimum: 0 }

  /dms:
    get:
      tags: [DMs]
      summary: List DM peers for the current user
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Peers
          content:
            application/json:
              schema:
                type: object
                properties:
                  peers:
                    type: array
                    items:
                      type: object
                      required: [username]
                      properties:
                        username: { $ref: '#/components/schemas/Username' }
                        last_ts: { $ref: '#/components/schemas/Timestamp' }
                        last_seq: { type: integer, minimum: 0 }
                  next_cursor: { type: string }

  /dms/{username}/messages:
    get:
      tags: [DMs]
      summary: Read forward DM history
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/FromSeq'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
                  next_seq: { type: integer, minimum: 0 }
    post:
      tags: [DMs]
      summary: Send a direct message
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MessageCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }

  /dms/{username}/messages/backfill:
    get:
      tags: [DMs]
      summary: Backfill DM history (reverse)
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Username'
        - $ref: '#/components/parameters/BeforeSeq'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items: { $ref: '#/components/schemas/Message' }
                  prev_seq: { type: integer, minimum: 0 }

  /dms/{username}/ack:
    post:
      tags: [DMs]
      summary: Advance the DM cursor
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AckRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /dms/{username}/cursor:
    get:
      tags: [DMs]
      summary: Read the DM cursor
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      responses:
        '200':
          description: Cursor
          content:
            application/json:
              schema:
                type: object
                properties:
                  seq: { type: integer, minimum: 0 }

  /messages/{message_id}:
    patch:
      tags: [Messages]
      summary: Edit a message (author only)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/MessageId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MessageEdit' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Message' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '403': { $ref: '#/components/responses/ErrorResponse' }
        '404': { $ref: '#/components/responses/ErrorResponse' }
    delete:
      tags: [Messages]
      summary: Delete own message (tombstone)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/MessageId' } ]
      responses:
        '200':
          description: Tombstoned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id: { $ref: '#/components/schemas/Id' }
                  tombstone: { type: boolean }
                  ts: { $ref: '#/components/schemas/Timestamp' }

  /messages/{message_id}/reactions:
    post:
      tags: [Messages]
      summary: Add a reaction
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/MessageId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReactionRequest' }
      responses:
        '200':
          description: Reaction counts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id: { $ref: '#/components/schemas/Id' }
                  reactions:
                    type: array
                    items: { $ref: '#/components/schemas/Reaction' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '404': { $ref: '#/components/responses/ErrorResponse' }
    delete:
      tags: [Messages]
      summary: Remove own reaction
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/MessageId' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReactionRequest' }
      responses:
        '200':
          description: Reaction counts
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id: { $ref: '#/components/schemas/Id' }
                  reactions:
                    type: array
                    items: { $ref: '#/components/schemas/Reaction' }

  /messages/{message_id}/purge:
    delete:
      tags: [Moderation]
      summary: Purge a message for policy violation (moderator/admin)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/MessageId' } ]
      responses:
        '200':
          description: Purged (tombstoned with reason)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message_id: { $ref: '#/components/schemas/Id' }
                  tombstone: { type: boolean }
                  moderation_reason: { type: string }

  /search/messages:
    get:
      tags: [Search]
      summary: Search messages (substring baseline)
      security: [{ BearerAuth: [] }]
      parameters:
        - name: q
          in: query
          required: true
          schema: { type: string }
        - name: room_name
          in: query
          required: false
          schema: { type: string }
        - name: dm_peer
          in: query
          required: false
          schema: { type: string }
        - name: before_ts
          in: query
          schema: { $ref: '#/components/schemas/Timestamp' }
        - name: after_ts
          in: query
          schema: { $ref: '#/components/schemas/Timestamp' }
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        message: { $ref: '#/components/schemas/Message' }
                        score: { type: number }
                  next_cursor: { type: string }

  /uploads:
    post:
      tags: [Uploads]
      summary: Upload a file and obtain CID
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema: { type: string, format: binary }
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UploadResponse' }
        '413': { $ref: '#/components/responses/ErrorResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /media/{cid}:
    get:
      tags: [Uploads]
      summary: Download media by CID
      security: [{ BearerAuth: [] }, {}]
      parameters: [ { $ref: '#/components/parameters/Cid' } ]
      responses:
        '200':
          description: Media bytes
          content:
            '*/*':
              schema: { type: string, format: binary }
        '401': { $ref: '#/components/responses/ErrorResponse' }
        '404': { $ref: '#/components/responses/ErrorResponse' }
    head:
      tags: [Uploads]
      summary: Media metadata
      security: [{ BearerAuth: [] }, {}]
      parameters: [ { $ref: '#/components/parameters/Cid' } ]
      responses:
        '200':
          description: OK
        '404': { $ref: '#/components/responses/ErrorResponse' }

  /previews:
    get:
      tags: [Uploads]
      summary: Fetch URL preview metadata (optional capability `previews`)
      security: [{ BearerAuth: [] }]
      parameters:
        - name: url
          in: query
          required: true
          schema: { type: string, format: uri }
      responses:
        '200':
          description: Preview
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Preview' }
        '400': { $ref: '#/components/responses/ErrorResponse' }

  /notifications/poll:
    get:
      tags: [Notifications]
      summary: Long-poll notifications
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/Cursor'
        - name: timeout_s
          in: query
          schema: { type: integer, minimum: 1, maximum: 60, default: 30 }
      responses:
        '200':
          description: Notifications batch
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      type: object
                      properties:
                        type: { type: string, enum: [mention, dm, invite] }
                        room_id: { $ref: '#/components/schemas/Id' }
                        message_id: { $ref: '#/components/schemas/Id' }
                        ts: { $ref: '#/components/schemas/Timestamp' }
                  next_cursor: { type: string }

  /push/register:
    post:
      tags: [Notifications]
      summary: Register a push device (optional)
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterPushRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '400': { $ref: '#/components/responses/ErrorResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /push/register/{device_id}:
    delete:
      tags: [Notifications]
      summary: Unregister a push device (optional)
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/DeviceId' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /prefs:
    patch:
      tags: [Preferences]
      summary: Patch general preferences (e.g., link previews opt-out)
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PrefsPatch' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /prefs/notifications:
    patch:
      tags: [Preferences]
      summary: Patch notification preferences
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotificationPrefsPatch' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/kick:
    post:
      tags: [Moderation]
      summary: Kick a user from a room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username]
              properties:
                username: { $ref: '#/components/schemas/Username' }
                reason: { type: string }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/bans:
    post:
      tags: [Moderation]
      summary: Ban a user in a room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BanRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/bans/{username}:
    delete:
      tags: [Moderation]
      summary: Unban a user in a room
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/RoomName'
        - $ref: '#/components/parameters/Username'
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/mutes:
    post:
      tags: [Moderation]
      summary: Mute a user in a room
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/RoomName' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MuteRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /rooms/{room_name}/mutes/{username}:
    delete:
      tags: [Moderation]
      summary: Unmute a user in a room
      security: [{ BearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/RoomName'
        - $ref: '#/components/parameters/Username'
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /bans:
    post:
      tags: [Moderation]
      summary: Server-wide ban a user
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BanRequest' }
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /bans/{username}:
    delete:
      tags: [Moderation]
      summary: Remove server-wide ban
      security: [{ BearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/Username' } ]
      responses:
        '204': { $ref: '#/components/responses/NoContent' }

  /reports:
    post:
      tags: [Moderation]
      summary: Report a user or message for moderation review
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ReportRequest' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  report_id: { $ref: '#/components/schemas/Id' }

  /emoji:
    get:
      tags: [Emoji]
      summary: List server emoji packs (optional)
      security: [{ BearerAuth: [] }, {}]
      responses:
        '200':
          description: Emoji packs
          content:
            application/json:
              schema:
                type: object
                properties:
                  packs:
                    type: array
                    items:
                      type: object
                      required: [shortcode]
                      properties:
                        shortcode: { type: string }
                        emoji: { type: string }
                        cid: { $ref: '#/components/schemas/Id' }

  /export:
    post:
      tags: [Export]
      summary: Request export of personal data (optional)
      security: [{ BearerAuth: [] }]
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ExportResponse' }

  /rtm:
    get:
      tags: [Realtime]
      summary: Establish WebSocket connection for real-time events
      description: >
        Perform an HTTP GET that upgrades to WebSocket (WSS strongly recommended).
        After upgrade, client sends a `WSHello` frame and receives a `WSReady`
        frame, then event frames as defined under components/schemas.
        Authentication is tickets-only: present the ticket via WebSocket subprotocol
        (recommended: `Sec-WebSocket-Protocol: orcp, ticket.<ticket>`) or as a
        query parameter `?ticket=<ticket>`.
      parameters:
        - name: ticket
          in: query
          required: false
          description: Ticket obtained from POST /rtm/ticket. Optional when using WS subprotocol.
          schema: { type: string }
      security: []
      responses:
        '101':
          description: Switching Protocols (WebSocket Upgrade)
        '401': { $ref: '#/components/responses/ErrorResponse' }

  /rtm/ticket:
    post:
      tags: [Realtime]
      summary: Mint a short-lived ticket for WebSocket authentication
      description: Requires standard HTTP auth. The returned ticket is single-use and short-lived.
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Ticket minted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TicketResponse' }
        '401': { $ref: '#/components/responses/ErrorResponse' }
