/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/meta/capabilities": {
    /** Discover server capabilities and limits */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CapabilityResponse"];
          };
        };
      };
    };
  };
  "/auth/guest": {
    /** Obtain a guest session (username required) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["GuestRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        400: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/auth/login": {
    /** Login with username/password (and optional OTP) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["LoginRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        /** @description Unauthorized (invalid credentials or OTP required) */
        401: {
          content: {
            "application/json": components["schemas"]["ErrorResponse"];
          };
        };
      };
    };
  };
  "/auth/refresh": {
    /** Refresh an access token */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RefreshRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["RefreshResponse"];
          };
        };
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/auth/logout": {
    /** Revoke the current device session */
    post: {
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/auth/sessions": {
    /** List active device sessions */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              sessions?: components["schemas"]["Session"][];
            };
          };
        };
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/auth/sessions/{session_id}": {
    /** Revoke another device session */
    delete: {
      parameters: {
        path: {
          session_id: components["parameters"]["SessionId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
        404: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/auth/oauth/start": {
    /** Start OAuth flow (optional feature) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["OAuthStartRequest"];
        };
      };
      responses: {
        /** @description Redirect URL */
        200: {
          content: {
            "application/json": components["schemas"]["OAuthStartResponse"];
          };
        };
        400: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/auth/oauth/callback": {
    /** Complete OAuth flow (optional feature) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["OAuthCallbackRequest"];
        };
      };
      responses: {
        /** @description Tokens and user */
        200: {
          content: {
            "application/json": components["schemas"]["LoginResponse"];
          };
        };
        400: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/users/me": {
    /** Get current user */
    get: {
      responses: {
        /** @description Current user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        401: components["responses"]["ErrorResponse"];
      };
    };
    /** Update current user profile */
    patch: {
      requestBody: {
        content: {
          "application/json": {
            display_name?: string;
            bio?: string;
            status_text?: string;
            status_emoji?: string;
            photo_cid?: components["schemas"]["Id"];
          };
        };
      };
      responses: {
        /** @description Updated user */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        400: components["responses"]["ErrorResponse"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/users/me/presence": {
    /** Set presence state */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PresenceUpdate"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/users/{user_id}": {
    /** Get a user's public profile */
    get: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description User */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        404: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/blocks/{user_id}": {
    /** Server-assisted block (optional) */
    post: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        400: components["responses"]["ErrorResponse"];
        401: components["responses"]["ErrorResponse"];
      };
    };
    /** Remove server-assisted block (optional) */
    delete: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/directory/users": {
    /** Searchable user directory */
    get: {
      parameters: {
        query?: {
          q?: string;
          limit?: components["parameters"]["Limit"];
          cursor?: components["parameters"]["Cursor"];
        };
      };
      responses: {
        /** @description Users */
        200: {
          content: {
            "application/json": {
              users?: components["schemas"]["User"][];
              next_cursor?: string;
            };
          };
        };
      };
    };
  };
  "/directory/rooms": {
    /** Discover public rooms */
    get: {
      parameters: {
        query?: {
          q?: string;
          limit?: components["parameters"]["Limit"];
          cursor?: components["parameters"]["Cursor"];
        };
      };
      responses: {
        /** @description Rooms */
        200: {
          content: {
            "application/json": {
              rooms?: components["schemas"]["Room"][];
              next_cursor?: string;
            };
          };
        };
      };
    };
  };
  "/rooms": {
    /** List rooms for the current user */
    get: {
      parameters: {
        query?: {
          mine?: boolean;
          limit?: components["parameters"]["Limit"];
          cursor?: components["parameters"]["Cursor"];
        };
      };
      responses: {
        /** @description Rooms */
        200: {
          content: {
            "application/json": {
              rooms?: components["schemas"]["Room"][];
              next_cursor?: string;
            };
          };
        };
        401: components["responses"]["ErrorResponse"];
      };
    };
    /** Create a room */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateRoomRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
        400: components["responses"]["ErrorResponse"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}": {
    /** Get a room */
    get: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        /** @description Room */
        200: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
        401: components["responses"]["ErrorResponse"];
        404: components["responses"]["ErrorResponse"];
      };
    };
    /** Update a room (owner/admin) */
    patch: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["PatchRoomRequest"];
        };
      };
      responses: {
        /** @description Room */
        200: {
          content: {
            "application/json": components["schemas"]["Room"];
          };
        };
        400: components["responses"]["ErrorResponse"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}/members": {
    /** List room members */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["Limit"];
          cursor?: components["parameters"]["Cursor"];
        };
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        /** @description Members */
        200: {
          content: {
            "application/json": {
              members?: components["schemas"]["RoomMember"][];
              next_cursor?: string;
            };
          };
        };
      };
    };
  };
  "/rooms/{room_name}/invite": {
    /** Invite a user to a private room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["InviteRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
        403: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}/join": {
    /** Join a room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
        403: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}/leave": {
    /** Leave a room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}/pins": {
    /** Pin a message */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": {
            message_id: components["schemas"]["Id"];
          };
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
      };
    };
    /** Unpin a message */
    delete: {
      parameters: {
        query: {
          message_id: components["schemas"]["Id"];
        };
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/roles": {
    /** Get role definitions for the room */
    get: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        /** @description Roles */
        200: {
          content: {
            "application/json": {
              roles?: components["schemas"]["Role"][];
            };
          };
        };
      };
    };
  };
  "/rooms/{room_name}/roles/assign": {
    /** Assign a role to a user */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["RoleAssignRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
        403: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}/messages": {
    /** Read forward room history */
    get: {
      parameters: {
        query?: {
          from_seq?: components["parameters"]["FromSeq"];
          limit?: components["parameters"]["Limit"];
        };
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        /** @description Messages */
        200: {
          content: {
            "application/json": {
              messages?: components["schemas"]["Message"][];
              next_seq?: number;
            };
          };
        };
      };
    };
    /** Send a message to a room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessageCreate"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
        400: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rooms/{room_name}/messages/backfill": {
    /** Backfill room history (reverse) */
    get: {
      parameters: {
        query?: {
          before_seq?: components["parameters"]["BeforeSeq"];
          limit?: components["parameters"]["Limit"];
        };
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        /** @description Messages */
        200: {
          content: {
            "application/json": {
              messages?: components["schemas"]["Message"][];
              prev_seq?: number;
            };
          };
        };
      };
    };
  };
  "/rooms/{room_name}/ack": {
    /** Advance the room cursor */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AckRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/cursor": {
    /** Read the room cursor */
    get: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      responses: {
        /** @description Cursor */
        200: {
          content: {
            "application/json": {
              seq?: number;
            };
          };
        };
      };
    };
  };
  "/dms": {
    /** List DM peers for the current user */
    get: {
      parameters: {
        query?: {
          limit?: components["parameters"]["Limit"];
          cursor?: components["parameters"]["Cursor"];
        };
      };
      responses: {
        /** @description Peers */
        200: {
          content: {
            "application/json": {
              peers?: {
                  user_id: components["schemas"]["Id"];
                  last_ts?: components["schemas"]["Timestamp"];
                  last_seq?: number;
                }[];
              next_cursor?: string;
            };
          };
        };
      };
    };
  };
  "/dms/{user_id}/messages": {
    /** Read forward DM history */
    get: {
      parameters: {
        query?: {
          from_seq?: components["parameters"]["FromSeq"];
          limit?: components["parameters"]["Limit"];
        };
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Messages */
        200: {
          content: {
            "application/json": {
              messages?: components["schemas"]["Message"][];
              next_seq?: number;
            };
          };
        };
      };
    };
    /** Send a direct message */
    post: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessageCreate"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
      };
    };
  };
  "/dms/{user_id}/messages/backfill": {
    /** Backfill DM history (reverse) */
    get: {
      parameters: {
        query?: {
          before_seq?: components["parameters"]["BeforeSeq"];
          limit?: components["parameters"]["Limit"];
        };
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Messages */
        200: {
          content: {
            "application/json": {
              messages?: components["schemas"]["Message"][];
              prev_seq?: number;
            };
          };
        };
      };
    };
  };
  "/dms/{user_id}/ack": {
    /** Advance the DM cursor */
    post: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["AckRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/dms/{user_id}/cursor": {
    /** Read the DM cursor */
    get: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        /** @description Cursor */
        200: {
          content: {
            "application/json": {
              seq?: number;
            };
          };
        };
      };
    };
  };
  "/messages/{message_id}": {
    /** Delete own message (tombstone) */
    delete: {
      parameters: {
        path: {
          message_id: components["parameters"]["MessageId"];
        };
      };
      responses: {
        /** @description Tombstoned */
        200: {
          content: {
            "application/json": {
              message_id?: components["schemas"]["Id"];
              tombstone?: boolean;
              ts?: components["schemas"]["Timestamp"];
            };
          };
        };
      };
    };
    /** Edit a message (author only) */
    patch: {
      parameters: {
        path: {
          message_id: components["parameters"]["MessageId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MessageEdit"];
        };
      };
      responses: {
        /** @description Updated */
        200: {
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
        400: components["responses"]["ErrorResponse"];
        403: components["responses"]["ErrorResponse"];
        404: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/messages/{message_id}/reactions": {
    /** Add a reaction */
    post: {
      parameters: {
        path: {
          message_id: components["parameters"]["MessageId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReactionRequest"];
        };
      };
      responses: {
        /** @description Reaction counts */
        200: {
          content: {
            "application/json": {
              message_id?: components["schemas"]["Id"];
              reactions?: components["schemas"]["Reaction"][];
            };
          };
        };
        400: components["responses"]["ErrorResponse"];
        404: components["responses"]["ErrorResponse"];
      };
    };
    /** Remove own reaction */
    delete: {
      parameters: {
        path: {
          message_id: components["parameters"]["MessageId"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReactionRequest"];
        };
      };
      responses: {
        /** @description Reaction counts */
        200: {
          content: {
            "application/json": {
              message_id?: components["schemas"]["Id"];
              reactions?: components["schemas"]["Reaction"][];
            };
          };
        };
      };
    };
  };
  "/messages/{message_id}/purge": {
    /** Purge a message for policy violation (moderator/admin) */
    delete: {
      parameters: {
        path: {
          message_id: components["parameters"]["MessageId"];
        };
      };
      responses: {
        /** @description Purged (tombstoned with reason) */
        200: {
          content: {
            "application/json": {
              message_id?: components["schemas"]["Id"];
              tombstone?: boolean;
              moderation_reason?: string;
            };
          };
        };
      };
    };
  };
  "/search/messages": {
    /** Search messages (substring baseline) */
    get: {
      parameters: {
        query: {
          q: string;
          room_name?: string;
          dm_peer_id?: components["schemas"]["Id"];
          before_ts?: components["schemas"]["Timestamp"];
          after_ts?: components["schemas"]["Timestamp"];
          limit?: components["parameters"]["Limit"];
          cursor?: components["parameters"]["Cursor"];
        };
      };
      responses: {
        /** @description Results */
        200: {
          content: {
            "application/json": {
              results?: {
                  message?: components["schemas"]["Message"];
                  score?: number;
                }[];
              next_cursor?: string;
            };
          };
        };
      };
    };
  };
  "/uploads": {
    /** Upload a file and obtain CID */
    post: {
      requestBody: {
        content: {
          "application/octet-stream": string;
          "multipart/form-data": {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["UploadResponse"];
          };
        };
        401: components["responses"]["ErrorResponse"];
        413: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/media/{cid}": {
    /** Download media by CID */
    get: {
      parameters: {
        path: {
          cid: components["parameters"]["Cid"];
        };
      };
      responses: {
        /** @description Media bytes */
        200: {
          content: {
            "*/*": string;
          };
        };
        401: components["responses"]["ErrorResponse"];
        404: components["responses"]["ErrorResponse"];
      };
    };
    /** Media metadata */
    head: {
      parameters: {
        path: {
          cid: components["parameters"]["Cid"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: never;
        };
        404: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/previews": {
    /** Fetch URL preview metadata (optional capability `previews`) */
    get: {
      parameters: {
        query: {
          url: string;
        };
      };
      responses: {
        /** @description Preview */
        200: {
          content: {
            "application/json": components["schemas"]["Preview"];
          };
        };
        400: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/notifications/poll": {
    /** Long-poll notifications */
    get: {
      parameters: {
        query?: {
          cursor?: components["parameters"]["Cursor"];
          timeout_s?: number;
        };
      };
      responses: {
        /** @description Notifications batch */
        200: {
          content: {
            "application/json": {
              notifications?: ({
                  /** @enum {string} */
                  type?: "mention" | "dm" | "invite";
                  room_id?: components["schemas"]["Id"];
                  message_id?: components["schemas"]["Id"];
                  ts?: components["schemas"]["Timestamp"];
                })[];
              next_cursor?: string;
            };
          };
        };
      };
    };
  };
  "/push/register": {
    /** Register a push device (optional) */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["RegisterPushRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        400: components["responses"]["ErrorResponse"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/push/register/{device_id}": {
    /** Unregister a push device (optional) */
    delete: {
      parameters: {
        path: {
          device_id: components["parameters"]["DeviceId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/prefs": {
    /** Patch general preferences (e.g., link previews opt-out) */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["PrefsPatch"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/prefs/notifications": {
    /** Patch notification preferences */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["NotificationPrefsPatch"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/kick": {
    /** Kick a user from a room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": {
            user_id: components["schemas"]["Id"];
            reason?: string;
          };
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/bans": {
    /** Ban a user in a room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BanRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/bans/{user_id}": {
    /** Unban a user in a room */
    delete: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/mutes": {
    /** Mute a user in a room */
    post: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["MuteRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/rooms/{room_name}/mutes/{user_id}": {
    /** Unmute a user in a room */
    delete: {
      parameters: {
        path: {
          room_name: components["parameters"]["RoomName"];
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/bans": {
    /** Server-wide ban a user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["BanRequest"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/bans/{user_id}": {
    /** Remove server-wide ban */
    delete: {
      parameters: {
        path: {
          user_id: components["parameters"]["UserId"];
        };
      };
      responses: {
        204: components["responses"]["NoContent"];
      };
    };
  };
  "/reports": {
    /** Report a user or message for moderation review */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReportRequest"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": {
              report_id?: components["schemas"]["Id"];
            };
          };
        };
      };
    };
  };
  "/emoji": {
    /** List server emoji packs (optional) */
    get: {
      responses: {
        /** @description Emoji packs */
        200: {
          content: {
            "application/json": {
              packs?: {
                  shortcode: string;
                  emoji?: string;
                  cid?: components["schemas"]["Id"];
                }[];
            };
          };
        };
      };
    };
  };
  "/export": {
    /** Request export of personal data (optional) */
    post: {
      responses: {
        /** @description Accepted */
        202: {
          content: {
            "application/json": components["schemas"]["ExportResponse"];
          };
        };
      };
    };
  };
  "/rtm": {
    /**
     * Establish WebSocket connection for real-time events
     * @description Perform an HTTP GET that upgrades to WebSocket (WSS strongly recommended). After upgrade, client sends a `WSHello` frame and receives a `WSReady` frame, then event frames as defined under components/schemas. Authentication is tickets-only: present the ticket via WebSocket subprotocol (recommended: `Sec-WebSocket-Protocol: orcp, ticket.<ticket>`) or as a query parameter `?ticket=<ticket>`.
     */
    get: {
      parameters: {
        query?: {
          /** @description Ticket obtained from POST /rtm/ticket. Optional when using WS subprotocol. */
          ticket?: string;
        };
      };
      responses: {
        /** @description Switching Protocols (WebSocket Upgrade) */
        101: {
          content: never;
        };
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
  "/rtm/ticket": {
    /**
     * Mint a short-lived ticket for WebSocket authentication
     * @description Requires standard HTTP auth. The returned ticket is single-use and short-lived.
     */
    post: {
      responses: {
        /** @description Ticket minted */
        200: {
          content: {
            "application/json": components["schemas"]["TicketResponse"];
          };
        };
        401: components["responses"]["ErrorResponse"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description rfc4648 Base32 (no padding), server-scoped. */
    Id: string;
    /**
     * Format: date-time
     * @description RFC 3339 UTC with Z
     */
    Timestamp: string;
    User: {
      user_id: components["schemas"]["Id"];
      display_name: string;
      photo_cid?: components["schemas"]["Id"];
      bio?: string;
      status_text?: string;
      status_emoji?: string;
      [key: string]: unknown;
    };
    /** @enum {string} */
    PresenceState: "online" | "away" | "dnd";
    PresenceUpdate: {
      state: components["schemas"]["PresenceState"];
    };
    Room: {
      room_id: components["schemas"]["Id"];
      name: string;
      topic?: string;
      /** @enum {string} */
      visibility: "public" | "private";
      owner_id: components["schemas"]["Id"];
      created_at: components["schemas"]["Timestamp"];
      counts?: {
        members?: number;
        [key: string]: unknown;
      };
      pinned_message_ids?: components["schemas"]["Id"][];
      [key: string]: unknown;
    };
    RoomMember: {
      user_id: components["schemas"]["Id"];
      /** @enum {string} */
      role: "owner" | "admin" | "moderator" | "member" | "guest";
    };
    /** @enum {string} */
    Permission: "manage_room" | "manage_pins" | "manage_roles" | "kick" | "ban" | "mute" | "purge_message" | "post" | "react" | "edit_own_message" | "delete_own_message" | "read";
    Role: {
      /** @enum {string} */
      name: "owner" | "admin" | "moderator" | "member" | "guest";
      permissions: components["schemas"]["Permission"][];
    };
    Attachment: {
      cid: components["schemas"]["Id"];
      mime: string;
      name: string;
      bytes: number;
      [key: string]: unknown;
    };
    Reaction: {
      emoji: string;
      count: number;
      me?: boolean;
    };
    Message: {
      message_id: components["schemas"]["Id"];
      room_id?: components["schemas"]["Id"] | null;
      dm_peer_id?: components["schemas"]["Id"] | null;
      author_id: components["schemas"]["Id"];
      seq: number;
      ts: components["schemas"]["Timestamp"];
      parent_id?: components["schemas"]["Id"] | null;
      /** @constant */
      content_type?: "text/markdown";
      /** @description Markdown subset */
      text?: string;
      entities?: {
        mentions?: {
            user_id: components["schemas"]["Id"];
            range: number[];
          }[];
        links?: {
            /** Format: uri */
            url: string;
            range: number[];
          }[];
        [key: string]: unknown;
      };
      attachments?: components["schemas"]["Attachment"][];
      reactions?: components["schemas"]["Reaction"][];
      tombstone?: boolean;
      edited_at?: components["schemas"]["Timestamp"] | null;
      moderation_reason?: string | null;
      [key: string]: unknown;
    };
    MessageCreate: {
      text: string;
      /**
       * @default text/markdown
       * @enum {string}
       */
      content_type?: "text/markdown";
      parent_id?: components["schemas"]["Id"];
      attachments?: components["schemas"]["Attachment"][];
    };
    MessageEdit: {
      text?: string;
      attachments?: components["schemas"]["Attachment"][];
    };
    ReactionRequest: {
      emoji: string;
    };
    AckRequest: {
      seq: number;
    };
    CreateRoomRequest: {
      name: string;
      /** @enum {string} */
      visibility: "public" | "private";
      topic?: string;
    };
    PatchRoomRequest: {
      name?: string;
      /** @enum {string} */
      visibility?: "public" | "private";
      topic?: string;
    };
    InviteRequest: {
      user_id: components["schemas"]["Id"];
    };
    RoleAssignRequest: {
      user_id: components["schemas"]["Id"];
      /** @enum {string} */
      role: "owner" | "admin" | "moderator" | "member" | "guest";
    };
    BanRequest: {
      user_id: components["schemas"]["Id"];
      reason?: string;
      duration_sec?: number;
    };
    MuteRequest: {
      user_id: components["schemas"]["Id"];
      duration_sec?: number;
    };
    ReportRequest: {
      message_id?: components["schemas"]["Id"];
      user_id?: components["schemas"]["Id"];
      reason: string;
      notes?: string;
    };
    UploadResponse: {
      cid: components["schemas"]["Id"];
      bytes: number;
      mime: string;
      sha256: string;
    };
    TicketResponse: {
      ticket: string;
      expires_in_ms: number;
    };
    Preview: {
      /** Format: uri */
      url: string;
      title?: string;
      description?: string;
      image_cid?: components["schemas"]["Id"];
    };
    NotificationPrefsPatch: {
      room_overrides?: {
        [key: string]: {
          mute?: boolean;
        };
      };
      thread_mutes?: components["schemas"]["Id"][];
      user_mutes?: components["schemas"]["Id"][];
    };
    PrefsPatch: {
      link_previews?: boolean;
    };
    CapabilityResponse: {
      capabilities: string[];
      limits: {
        max_message_bytes: number;
        max_upload_bytes: number;
        max_reactions_per_message: number;
        cursor_idle_timeout_ms: number;
        rate_limits: {
          burst: number;
          per_minute: number;
        };
      };
      server: {
        name: string;
        description?: string;
        contact?: string;
      };
    };
    Session: {
      session_id: components["schemas"]["Id"];
      device?: string;
      created_at: components["schemas"]["Timestamp"];
      last_seen_at?: components["schemas"]["Timestamp"];
    };
    ErrorResponse: {
      error: {
        /** @enum {string} */
        code: "bad_request" | "unauthorized" | "forbidden" | "not_found" | "unsupported_capability" | "rate_limited" | "conflict" | "history_pruned" | "internal" | "otp_required";
        message: string;
        details?: Record<string, never>;
      };
    };
    OAuthStartRequest: {
      provider: string;
    };
    OAuthStartResponse: {
      /** Format: uri */
      redirect_url: string;
    };
    OAuthCallbackRequest: {
      code: string;
      state: string;
    };
    LoginRequest: {
      username: string;
      password: string;
      otp_code?: string;
    };
    GuestRequest: {
      username: string;
    };
    LoginResponse: {
      access_token: string;
      refresh_token?: string;
      user: components["schemas"]["User"];
    };
    RefreshRequest: {
      refresh_token: string;
    };
    RefreshResponse: {
      access_token: string;
      refresh_token?: string;
    };
    RegisterPushRequest: {
      /** @enum {string} */
      platform: "webpush" | "apns" | "fcm";
      token: string;
      device_id: components["schemas"]["Id"];
    };
    ExportResponse: {
      export_id: components["schemas"]["Id"];
      /** @enum {string} */
      status: "queued" | "running" | "complete" | "failed";
      /** Format: uri */
      url?: string;
    };
    WSHello: {
      /** @constant */
      type: "hello";
      client: {
        name: string;
        version: string;
      };
      /** @description Map of stream keys to last processed seq (e.g., "room:<name>", "dm:<user_id>"). */
      cursors?: {
        [key: string]: number;
      };
      /** @description Optional feature hints (e.g., presence, typing, reactions). */
      want?: string[];
    };
    WSReady: {
      /** @constant */
      type: "ready";
      heartbeat_ms: number;
      server_time: components["schemas"]["Timestamp"];
      capabilities?: string[];
    };
    WSEventMessageCreate: {
      /** @constant */
      type: "event.message.create";
      message: components["schemas"]["Message"];
    };
    WSEventMessageEdit: {
      /** @constant */
      type: "event.message.edit";
      message: components["schemas"]["Message"];
    };
    WSEventMessageDelete: {
      /** @constant */
      type: "event.message.delete";
      message_id: components["schemas"]["Id"];
      room_id?: components["schemas"]["Id"];
      dm_peer_id?: components["schemas"]["Id"];
      ts?: components["schemas"]["Timestamp"];
    };
    WSEventReactionAdd: {
      /** @constant */
      type: "event.reaction.add";
      message_id: components["schemas"]["Id"];
      emoji: string;
      counts?: {
          emoji: string;
          count: number;
        }[];
    };
    WSEventTyping: {
      /** @constant */
      type: "event.typing";
      room_id?: components["schemas"]["Id"];
      dm_peer_id?: components["schemas"]["Id"];
      user_id: components["schemas"]["Id"];
      /** @enum {string} */
      state: "start" | "stop";
    };
    /** @description WebSocket cursor acknowledgement frame. */
    WSAck: {
      /** @constant */
      type: "ack";
      cursors: {
        [key: string]: number;
      };
    };
    WSError: {
      /** @constant */
      type: "error";
      error: components["schemas"]["ErrorResponse"];
    };
  };
  responses: {
    /** @description Error */
    ErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
    /** @description No Content */
    NoContent: {
      content: never;
    };
  };
  parameters: {
    /** @description Maximum number of items to return. */
    Limit?: number;
    /** @description Opaque pagination cursor returned by a previous call. */
    Cursor?: string;
    /** @description Inclusive starting sequence number for forward pagination. */
    FromSeq?: number;
    /** @description Exclusive sequence number to backfill before, descending. */
    BeforeSeq?: number;
    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
    RoomName: string;
    UserId: components["schemas"]["Id"];
    MessageId: components["schemas"]["Id"];
    SessionId: components["schemas"]["Id"];
    Cid: components["schemas"]["Id"];
    DeviceId: components["schemas"]["Id"];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
