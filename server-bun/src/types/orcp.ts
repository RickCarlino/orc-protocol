/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/meta/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Discover server capabilities and limits */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CapabilityResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/guest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Obtain a guest session (username required) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GuestRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with username/password (and optional OTP) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Unauthorized (invalid credentials or OTP required) */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh an access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RefreshRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RefreshResponse"];
                    };
                };
                401: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Revoke the current device session */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active device sessions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sessions?: components["schemas"]["Session"][];
                        };
                    };
                };
                401: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Revoke another device session */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    session_id: components["parameters"]["SessionId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
                404: components["responses"]["ErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                401: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user profile */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        display_name?: string;
                        bio?: string;
                        status_text?: string;
                        status_emoji?: string;
                        photo_cid?: components["schemas"]["Id"];
                    };
                };
            };
            responses: {
                /** @description Updated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        trace?: never;
    };
    "/users/me/presence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Set presence state */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PresenceUpdate"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        trace?: never;
    };
    "/users/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a user's public profile */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                404: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Server-assisted block (optional) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                400: components["responses"]["ErrorResponse"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        /** Remove server-assisted block (optional) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/directory/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Searchable user directory */
        get: {
            parameters: {
                query?: {
                    q?: string;
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            users?: components["schemas"]["User"][];
                            next_cursor?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/directory/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Discover public rooms */
        get: {
            parameters: {
                query?: {
                    q?: string;
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rooms */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rooms?: components["schemas"]["Room"][];
                            next_cursor?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List rooms for the current user */
        get: {
            parameters: {
                query?: {
                    mine?: boolean;
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rooms */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            rooms?: components["schemas"]["Room"][];
                            next_cursor?: string;
                        };
                    };
                };
                401: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        /** Create a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateRoomRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Room"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a room */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Room */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Room"];
                    };
                };
                401: components["responses"]["ErrorResponse"];
                404: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a room (owner/admin) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PatchRoomRequest"];
                };
            };
            responses: {
                /** @description Room */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Room"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        trace?: never;
    };
    "/rooms/{room_name}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List room members */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                };
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Members */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            members?: components["schemas"]["RoomMember"][];
                            next_cursor?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invite a user to a private room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["InviteRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
                403: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
                403: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/leave": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Leave a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/pins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Pin a message */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        message_id: components["schemas"]["Id"];
                    };
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        /** Unpin a message */
        delete: {
            parameters: {
                query: {
                    message_id: components["schemas"]["Id"];
                };
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get role definitions for the room */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Roles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            roles?: components["schemas"]["Role"][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/roles/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign a role to a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RoleAssignRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
                403: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read forward room history */
        get: {
            parameters: {
                query?: {
                    /** @description Inclusive starting sequence number for forward pagination. */
                    from_seq?: components["parameters"]["FromSeq"];
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                };
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Messages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            messages?: components["schemas"]["Message"][];
                            next_seq?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Send a message to a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MessageCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Message"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/messages/backfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Backfill room history (reverse) */
        get: {
            parameters: {
                query?: {
                    /** @description Exclusive sequence number to backfill before, descending. */
                    before_seq?: components["parameters"]["BeforeSeq"];
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                };
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Messages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            messages?: components["schemas"]["Message"][];
                            prev_seq?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/ack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Advance the room cursor */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AckRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/cursor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read the room cursor */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cursor */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            seq?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List DM peers for the current user */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Peers */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            peers?: {
                                username: components["schemas"]["Username"];
                                last_ts?: components["schemas"]["Timestamp"];
                                last_seq?: number;
                            }[];
                            next_cursor?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dms/{username}/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read forward DM history */
        get: {
            parameters: {
                query?: {
                    /** @description Inclusive starting sequence number for forward pagination. */
                    from_seq?: components["parameters"]["FromSeq"];
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                };
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Messages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            messages?: components["schemas"]["Message"][];
                            next_seq?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        /** Send a direct message */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MessageCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Message"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dms/{username}/messages/backfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Backfill DM history (reverse) */
        get: {
            parameters: {
                query?: {
                    /** @description Exclusive sequence number to backfill before, descending. */
                    before_seq?: components["parameters"]["BeforeSeq"];
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                };
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Messages */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            messages?: components["schemas"]["Message"][];
                            prev_seq?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dms/{username}/ack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Advance the DM cursor */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AckRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/dms/{username}/cursor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read the DM cursor */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cursor */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            seq?: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete own message (tombstone) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: components["parameters"]["MessageId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tombstoned */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message_id?: components["schemas"]["Id"];
                            tombstone?: boolean;
                            ts?: components["schemas"]["Timestamp"];
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Edit a message (author only) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: components["parameters"]["MessageId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MessageEdit"];
                };
            };
            responses: {
                /** @description Updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Message"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
                403: components["responses"]["ErrorResponse"];
                404: components["responses"]["ErrorResponse"];
            };
        };
        trace?: never;
    };
    "/messages/{message_id}/reactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a reaction */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: components["parameters"]["MessageId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReactionRequest"];
                };
            };
            responses: {
                /** @description Reaction counts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message_id?: components["schemas"]["Id"];
                            reactions?: components["schemas"]["Reaction"][];
                        };
                    };
                };
                400: components["responses"]["ErrorResponse"];
                404: components["responses"]["ErrorResponse"];
            };
        };
        /** Remove own reaction */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: components["parameters"]["MessageId"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReactionRequest"];
                };
            };
            responses: {
                /** @description Reaction counts */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message_id?: components["schemas"]["Id"];
                            reactions?: components["schemas"]["Reaction"][];
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}/purge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Purge a message for policy violation (moderator/admin) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    message_id: components["parameters"]["MessageId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Purged (tombstoned with reason) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message_id?: components["schemas"]["Id"];
                            tombstone?: boolean;
                            moderation_reason?: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search messages (substring baseline) */
        get: {
            parameters: {
                query: {
                    q: string;
                    room_name?: string;
                    dm_peer?: string;
                    before_ts?: components["schemas"]["Timestamp"];
                    after_ts?: components["schemas"]["Timestamp"];
                    /** @description Maximum number of items to return. */
                    limit?: components["parameters"]["Limit"];
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results?: {
                                message?: components["schemas"]["Message"];
                                score?: number;
                            }[];
                            next_cursor?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a file and obtain CID */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/octet-stream": string;
                    "multipart/form-data": {
                        /** Format: binary */
                        file?: string;
                    };
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadResponse"];
                    };
                };
                401: components["responses"]["ErrorResponse"];
                413: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{cid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download media by CID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cid: components["parameters"]["Cid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media bytes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": string;
                    };
                };
                401: components["responses"]["ErrorResponse"];
                404: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /** Media metadata */
        head: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    cid: components["parameters"]["Cid"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["ErrorResponse"];
            };
        };
        patch?: never;
        trace?: never;
    };
    "/previews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetch URL preview metadata (optional capability `previews`) */
        get: {
            parameters: {
                query: {
                    url: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Preview */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Preview"];
                    };
                };
                400: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/poll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Long-poll notifications */
        get: {
            parameters: {
                query?: {
                    /** @description Opaque pagination cursor returned by a previous call. */
                    cursor?: components["parameters"]["Cursor"];
                    timeout_s?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Notifications batch */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            notifications?: {
                                /** @enum {string} */
                                type?: "mention" | "dm" | "invite";
                                room_id?: components["schemas"]["Id"];
                                message_id?: components["schemas"]["Id"];
                                ts?: components["schemas"]["Timestamp"];
                            }[];
                            next_cursor?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/push/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a push device (optional) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterPushRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
                400: components["responses"]["ErrorResponse"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/push/register/{device_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unregister a push device (optional) */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    device_id: components["parameters"]["DeviceId"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
                401: components["responses"]["ErrorResponse"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prefs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch general preferences (e.g., link previews opt-out) */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PrefsPatch"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        trace?: never;
    };
    "/prefs/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Patch notification preferences */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["NotificationPrefsPatch"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        trace?: never;
    };
    "/rooms/{room_name}/kick": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Kick a user from a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        username: components["schemas"]["Username"];
                        reason?: string;
                    };
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ban a user in a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BanRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/bans/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unban a user in a room */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/mutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mute a user in a room */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MuteRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rooms/{room_name}/mutes/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Unmute a user in a room */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
                    room_name: components["parameters"]["RoomName"];
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Server-wide ban a user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BanRequest"];
                };
            };
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bans/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove server-wide ban */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
                    username: components["parameters"]["Username"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                204: components["responses"]["NoContent"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Report a user or message for moderation review */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReportRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            report_id?: components["schemas"]["Id"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/emoji": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List server emoji packs (optional) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Emoji packs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            packs?: {
                                shortcode: string;
                                emoji?: string;
                                cid?: components["schemas"]["Id"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request export of personal data (optional) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExportResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rtm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Establish WebSocket connection for real-time events
         * @description Perform an HTTP GET that upgrades to WebSocket (WSS strongly recommended). After upgrade, client sends a `WSHello` frame and receives a `WSReady` frame, then event frames as defined under components/schemas. Authentication is tickets-only: present the ticket via WebSocket subprotocol (recommended: `Sec-WebSocket-Protocol: orcp, ticket.<ticket>`) or as a query parameter `?ticket=<ticket>`.
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description Ticket obtained from POST /rtm/ticket. Optional when using WS subprotocol. */
                    ticket?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Switching Protocols (WebSocket Upgrade) */
                101: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rtm/ticket": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mint a short-lived ticket for WebSocket authentication
         * @description Requires standard HTTP auth. The returned ticket is single-use and short-lived.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ticket minted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TicketResponse"];
                    };
                };
                401: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Globally-unique public username. */
        Username: string;
        /** @description rfc4648 Base32 (no padding), server-scoped. */
        Id: string;
        /**
         * Format: date-time
         * @description RFC 3339 UTC with Z
         */
        Timestamp: string;
        User: {
            username: components["schemas"]["Username"];
            display_name: string;
            photo_cid?: components["schemas"]["Id"];
            bio?: string;
            status_text?: string;
            status_emoji?: string;
        } & {
            [key: string]: unknown;
        };
        /** @enum {string} */
        PresenceState: "online" | "away" | "dnd";
        PresenceUpdate: {
            state: components["schemas"]["PresenceState"];
        };
        Room: {
            room_id: components["schemas"]["Id"];
            name: string;
            topic?: string;
            /** @enum {string} */
            visibility: "public" | "private";
            owner: components["schemas"]["Username"];
            created_at: components["schemas"]["Timestamp"];
            counts?: {
                members?: number;
            } & {
                [key: string]: unknown;
            };
            pinned_message_ids?: components["schemas"]["Id"][];
        } & {
            [key: string]: unknown;
        };
        RoomMember: {
            username: components["schemas"]["Username"];
            /** @enum {string} */
            role: "owner" | "admin" | "moderator" | "member" | "guest";
        };
        /** @enum {string} */
        Permission: "manage_room" | "manage_pins" | "manage_roles" | "kick" | "ban" | "mute" | "purge_message" | "post" | "react" | "edit_own_message" | "delete_own_message" | "read";
        Role: {
            /** @enum {string} */
            name: "owner" | "admin" | "moderator" | "member" | "guest";
            permissions: components["schemas"]["Permission"][];
        };
        Attachment: {
            cid: components["schemas"]["Id"];
            mime: string;
            name: string;
            bytes: number;
        } & {
            [key: string]: unknown;
        };
        Reaction: {
            emoji: string;
            count: number;
            me?: boolean;
        };
        Message: {
            message_id: components["schemas"]["Id"];
            room_id?: components["schemas"]["Id"] | null;
            dm_peer?: string | null;
            author: components["schemas"]["Username"];
            seq: number;
            ts: components["schemas"]["Timestamp"];
            parent_id?: components["schemas"]["Id"] | null;
            /** @constant */
            content_type?: "text/markdown";
            /** @description Markdown subset */
            text?: string;
            entities?: {
                mentions?: {
                    username: components["schemas"]["Username"];
                    range: number[];
                }[];
                links?: {
                    /** Format: uri */
                    url: string;
                    range: number[];
                }[];
            } & {
                [key: string]: unknown;
            };
            attachments?: components["schemas"]["Attachment"][];
            reactions?: components["schemas"]["Reaction"][];
            tombstone?: boolean;
            edited_at?: components["schemas"]["Timestamp"] | null;
            moderation_reason?: string | null;
        } & {
            [key: string]: unknown;
        };
        MessageCreate: {
            text: string;
            /**
             * @default text/markdown
             * @enum {string}
             */
            content_type: "text/markdown";
            parent_id?: components["schemas"]["Id"];
            attachments?: components["schemas"]["Attachment"][];
        };
        MessageEdit: {
            text?: string;
            attachments?: components["schemas"]["Attachment"][];
        };
        ReactionRequest: {
            emoji: string;
        };
        AckRequest: {
            seq: number;
        };
        CreateRoomRequest: {
            name: string;
            /** @enum {string} */
            visibility: "public" | "private";
            topic?: string;
        };
        PatchRoomRequest: {
            name?: string;
            /** @enum {string} */
            visibility?: "public" | "private";
            topic?: string;
        };
        InviteRequest: {
            username: components["schemas"]["Username"];
        };
        RoleAssignRequest: {
            username: components["schemas"]["Username"];
            /** @enum {string} */
            role: "owner" | "admin" | "moderator" | "member" | "guest";
        };
        BanRequest: {
            username: components["schemas"]["Username"];
            reason?: string;
            duration_sec?: number;
        };
        MuteRequest: {
            username: components["schemas"]["Username"];
            duration_sec?: number;
        };
        ReportRequest: {
            message_id?: components["schemas"]["Id"];
            username?: components["schemas"]["Username"];
            reason: string;
            notes?: string;
        };
        UploadResponse: {
            cid: components["schemas"]["Id"];
            bytes: number;
            mime: string;
            sha256: string;
        };
        TicketResponse: {
            ticket: string;
            expires_in_ms: number;
        };
        Preview: {
            /** Format: uri */
            url: string;
            title?: string;
            description?: string;
            image_cid?: components["schemas"]["Id"];
        };
        NotificationPrefsPatch: {
            room_overrides?: {
                [key: string]: {
                    mute?: boolean;
                };
            };
            thread_mutes?: components["schemas"]["Id"][];
            user_mutes?: components["schemas"]["Username"][];
        };
        PrefsPatch: {
            link_previews?: boolean;
        };
        CapabilityResponse: {
            capabilities: string[];
            limits: {
                max_message_bytes: number;
                max_upload_bytes: number;
                max_reactions_per_message: number;
                cursor_idle_timeout_ms: number;
                rate_limits: {
                    burst: number;
                    per_minute: number;
                };
            };
            server: {
                name: string;
                description?: string;
                contact?: string;
            };
        };
        Session: {
            session_id: components["schemas"]["Id"];
            device?: string;
            created_at: components["schemas"]["Timestamp"];
            last_seen_at?: components["schemas"]["Timestamp"];
        };
        ErrorResponse: {
            error: {
                /** @enum {string} */
                code: "bad_request" | "unauthorized" | "forbidden" | "not_found" | "unsupported_capability" | "rate_limited" | "conflict" | "history_pruned" | "internal";
                message: string;
                details?: Record<string, never>;
            };
        };
        LoginRequest: {
            username: string;
            password: string;
        };
        GuestRequest: {
            username: string;
        };
        LoginResponse: {
            access_token: string;
            refresh_token?: string;
            user: components["schemas"]["User"];
        };
        RefreshRequest: {
            refresh_token: string;
        };
        RefreshResponse: {
            access_token: string;
            refresh_token?: string;
        };
        RegisterPushRequest: {
            /** @enum {string} */
            platform: "webpush" | "apns" | "fcm";
            token: string;
            device_id: components["schemas"]["Id"];
        };
        ExportResponse: {
            export_id: components["schemas"]["Id"];
            /** @enum {string} */
            status: "queued" | "running" | "complete" | "failed";
            /** Format: uri */
            url?: string;
        };
        WSHello: {
            /** @constant */
            type: "hello";
            client: {
                name: string;
                version: string;
            };
            /** @description Map of stream keys to last processed seq (e.g., "room:<name>", "dm:<username>"). */
            cursors?: {
                [key: string]: number;
            };
            /** @description Optional feature hints (e.g., presence, typing, reactions). */
            want?: string[];
        };
        WSReady: {
            /** @constant */
            type: "ready";
            heartbeat_ms: number;
            server_time: components["schemas"]["Timestamp"];
            capabilities?: string[];
        };
        WSEventMessageCreate: {
            /** @constant */
            type: "event.message.create";
            message: components["schemas"]["Message"];
        };
        WSEventMessageEdit: {
            /** @constant */
            type: "event.message.edit";
            message: components["schemas"]["Message"];
        };
        WSEventMessageDelete: {
            /** @constant */
            type: "event.message.delete";
            message_id: components["schemas"]["Id"];
            room_id?: components["schemas"]["Id"];
            dm_peer?: string;
            ts?: components["schemas"]["Timestamp"];
        };
        WSEventReactionAdd: {
            /** @constant */
            type: "event.reaction.add";
            message_id: components["schemas"]["Id"];
            emoji: string;
            counts?: {
                emoji: string;
                count: number;
            }[];
        };
        WSEventTyping: {
            /** @constant */
            type: "event.typing";
            room_id?: components["schemas"]["Id"];
            dm_peer?: string;
            username: components["schemas"]["Username"];
            /** @enum {string} */
            state: "start" | "stop";
        };
        /** @description WebSocket cursor acknowledgement frame. */
        WSAck: {
            /** @constant */
            type: "ack";
            cursors: {
                [key: string]: number;
            };
        };
        WSError: {
            /** @constant */
            type: "error";
            error: components["schemas"]["ErrorResponse"];
        };
    };
    responses: {
        /** @description Error */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description No Content */
        NoContent: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
    };
    parameters: {
        /** @description Maximum number of items to return. */
        Limit: number;
        /** @description Opaque pagination cursor returned by a previous call. */
        Cursor: string;
        /** @description Inclusive starting sequence number for forward pagination. */
        FromSeq: number;
        /** @description Exclusive sequence number to backfill before, descending. */
        BeforeSeq: number;
        /** @description Globally unique room name (case-insensitive uniqueness). Servers MAY canonicalize. */
        RoomName: string;
        /** @description Globally-unique username (2-32 chars, lowercase a-z, 0-9, . _ -) */
        Username: components["schemas"]["Username"];
        MessageId: components["schemas"]["Id"];
        SessionId: components["schemas"]["Id"];
        Cid: components["schemas"]["Id"];
        DeviceId: components["schemas"]["Id"];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
